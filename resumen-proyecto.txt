
Proyecto: Automatizaci√≥n Inteligente de Reuniones con Coda.io
Fecha de documento: 2025-06-01

Objetivo general:
Desarrollar un sistema automatizado que procese las transcripciones de reuniones internas (v√≠a Circleback), identifique temas clave, genere insights estructurados y los sincronice con tablas din√°micas en Coda.io. El sistema debe ser escalable, multiempresa, y capaz de reducir o eliminar el procesamiento de lenguaje natural (PLN) posterior gracias a la estructuraci√≥n precisa desde Circleback.

---

‚öôÔ∏è Alcance funcional del sistema

Entrada:
- Transcripci√≥n completa de la reuni√≥n.
- Metadatos (fecha, participantes, duraci√≥n, etc.).

Procesamiento intermedio:
1. Detecci√≥n de temas tratados.
2. Extracci√≥n de tareas, responsables y fechas.
3. Identificaci√≥n de tareas anteriores mencionadas.
4. Clasificaci√≥n por categor√≠as: decisiones, ideas, tareas, bloqueos, riesgos, etc.

Salidas esperadas (en Coda.io):
- Creaci√≥n de nuevas filas en tablas espec√≠ficas.
- Actualizaci√≥n de tareas existentes si se mencionan nuevamente.
- Creaci√≥n de nuevas tablas si se detecta un esquema nuevo.
- Hist√≥rico por reuni√≥n y proyecto.
- Seguimiento autom√°tico de tareas y decisiones.

---

üß† Flujo l√≥gico del sistema:

1. Webhook listener (API Gateway + Lambda/FastAPI).
2. Cola de mensajes (ej. SQS) para desacoplar procesamiento.
3. Backend en FastAPI que limpia y procesa la transcripci√≥n.
4. Clasificaci√≥n y detecci√≥n de entidades relevantes.
5. L√≥gica de decisi√≥n para crear, actualizar o sugerir nueva estructura.
6. Uso de API de Coda para insertar o actualizar registros.
7. Persistencia de logs y registros de auditor√≠a.
8. Posibilidad de seguimiento entre reuniones v√≠a reuni√≥n_id.

---

üèóÔ∏è Arquitectura t√©cnica recomendada:

- Entrada: API Gateway + Lambda o FastAPI (verificaci√≥n HMAC, control de IP).
- Mensajer√≠a: Amazon SQS (manejo de errores, reintentos).
- Procesamiento: FastAPI con spaCy + hashing + l√≥gica de decisi√≥n.
- Embeddings opcionales: Sentence-Transformers + FAISS (para similitud).
- Almacenamiento: DynamoDB o RDS (solo si es necesario).
- Integraci√≥n Coda: REST API con tokens OAuth o claves por workspace.
- Observabilidad: CloudWatch, Sentry, OpenTelemetry.
- Infraestructura: Docker, Terraform/CDK, deployment en AWS o Railway.

---

üìÅ Estructura sugerida en Coda.io:

1. Tabla: Tareas
   - tarea_id, tema_principal, descripcion_completa, responsable_directo, otros_participantes, fecha_limite, proyecto_o_area_relacionada, impacto_importancia, requiere_seguimiento, notas_adicionales

2. Tabla: PreguntasPendientes
   - pregunta_id, texto_pregunta, autor_pregunta, contexto, estado_actual, fecha_registro

3. Tabla: Feedback
   - feedback_id, autor_feedback, texto_feedback, categor√≠a, urgencia, fecha_feedback

4. Tabla: RiesgosBloqueos
   - riesgo_id/bloqueo_id, tipo, descripci√≥n, origen, impacto_posible, acci√≥n_recomendada, responsable, fecha_identificaci√≥n

5. Tabla: DecisionesEstrat√©gicas
   - decision_id, descripci√≥n_decisi√≥n, justificaci√≥n, participantes_clave, fecha_decisi√≥n, impacto_en, seguimiento_requerido, pr√≥xima_fecha_revisi√≥n

6. Tabla: IdeasSeguimientoInfo
   - idea_id / seguimiento_id / info_id, tema_principal, descripci√≥n, responsable_directo, otros_participantes, fecha_reuni√≥n, notas_adicionales

7. Tabla: ResumenReunion
   - reunion_id, fecha_reuni√≥n, titulo_reuni√≥n, resumen_general, participantes_principales, temas_clave, decisiones_tomadas, tareas_identificadas, bloqueos_detectados, seguimiento_requerido, proyectos_relacionados

8. Tabla: NuevoSchemaReunion
   - schema_id, motivo_gen√©rico, campos_sugeridos (como lista de objetos), valor_ejemplo (como JSON)

---

üß© Insights personalizados creados:

1. Tareas
2. Preguntas Pendientes
3. Feedback
4. RiesgosBloqueos
5. DecisionesEstrat√©gicas
6. Ideas / Seguimiento / Informaci√≥n
7. ResumenReunion
8. NuevoSchemaReunion (gen√©rico para casos no contemplados)

Cada uno incluye un ID determinista generado como hash SHA-1 truncado (8 caracteres) usando los campos principales de cada insight. Esto permite upserts autom√°ticos en Coda.io.

---

üß† Notas de dise√±o clave:
- Todo el contenido estructurado se genera directamente desde Circleback usando prompts en la secci√≥n ‚ÄúDescription‚Äù de cada insight.
- Se evita el PLN adicional gracias al formato estructurado.
- Si Circleback devuelve un hash inv√°lido, el backend puede regenerarlo usando SHA-1 real.
- El insight gen√©rico permite extender el sistema a cualquier tipo de dato futuro no contemplado.

---

üí° Resultado final:
Un sistema robusto, escalable, y listo para convertirse en un SaaS que convierte conversaciones en acci√≥n estructurada.
